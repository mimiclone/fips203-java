package com.mimiclone.fips203.key.gen.impl;

import com.mimiclone.fips203.ParameterSet;
import com.mimiclone.fips203.key.FIPS203KeyPair;
import com.mimiclone.fips203.key.gen.FIPS203KeyGeneration;
import com.mimiclone.fips203.key.gen.KeyPairGenerationException;
import com.mimiclone.fips203.key.impl.FIPS203KeyPairImpl;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;

import java.nio.ByteBuffer;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

@AllArgsConstructor
public final class KeyGenImpl implements FIPS203KeyGeneration {

    private final ParameterSet parameterSet;

    /**
     * Implements Algorithm 16 (ML-KEM.KeyGen_internal) of the FIPS203 Specification
     *
     * @param d A byte array of exactly length 32 of randomly generated noise
     * @param z A byte array of exactly length 32 of randomly generated noise
     *
     * @return FIPS203KeyPair
     */
    @Override
    public FIPS203KeyPair generateKeyPair(byte[] d, byte[] z) {

        // Ensure d exists and is 32 bytes long
        assert d != null;
        assert d.length == 32;

        // Ensure z exists and is 32 bytes long
        assert z != null;
        assert z.length == 32;

        // Call K-PKE.KeyGen
        FIPS203KeyPair baseKeyPair = generateKPKE(d);

        // TODO: Modify Decapsulation Key

        return baseKeyPair;

    }

    /**
     * Implements Algorithm 13 of the FIPS203 Specification.
     * This is described in Section 5.1 of the August 13 Spec Release starting on Page 28
     *
     * @param d An array of exactly 32 randomly generated bytes.
     *
     * @return An initial FIPS203KeyPair instance
     */
    protected final FIPS203KeyPair generateKPKE(byte[] d) {

        // Ensure d exists and is 32 bytes long
        assert d != null;
        assert d.length == 32;

        // Get k as a byte value from parameter set
        int k = parameterSet.getK();
        byte[] kb = { (byte) k };

        // 1: Expand 32 + 1 bytes to two pseudorandom 32-byte seeds
        byte[] dk = new byte[33];
        ByteBuffer buffer = ByteBuffer.wrap(dk);
        buffer.put(d);
        buffer.put(kb);
        dk = buffer.array();

        byte[] rho = null;
        byte[] sigma = null;
        try {

            // Generate the combined seeds
            byte[] rhosigma = sha3hash512(dk);
            assert rhosigma != null;
            assert rhosigma.length == 64;

            // Split out rho
            rho = new byte[32];
            System.arraycopy(rhosigma, 0, rho, 0, rho.length);

            // Split out sigma
            sigma = new byte[32];
            System.arraycopy(rhosigma, rho.length, sigma, 0, sigma.length);

        } catch (NoSuchAlgorithmException e) {
            throw new KeyPairGenerationException("K-PKE seed generation failed because SHA3-512 could not be found on the system.");
        }

        int[][][] aHatMatrix = new int[k][k][256];

        // Generate A hat matrix
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                aHatMatrix[i][j] = sampleNTT(
                        ByteBuffer.wrap(new byte[34])
                                .put(rho)
                                .put((byte) j)
                                .put((byte) i)
                                .array()
                );
            }
        }

        return new FIPS203KeyPairImpl(null, null);
    }

    protected int[] sampleNTT(byte[] seedPlusIndices) {

        // TODO: Init context with XOF

        // TODO: Absorb seedPlusIndices into context with XOF

        // TODO: Implement the rest

        // TODO: Replace with actual return value
        return new int[256];
    }

    /**
     * Implements the H hash function (SHA3-256) from the FIPS203 Specification.
     *
     * @param s A variable length array of bytes
     *
     * @return A byte array of exactly 32 bytes
     */
    protected final byte[] sha3hash256(byte[] s) throws NoSuchAlgorithmException {
        byte[] result = new byte[32];

        MessageDigest md = MessageDigest.getInstance("SHA3-256");
        result = md.digest(s);

        return result;
    }

    /**
     * Implements the J hash function (SHAKE256) from the FIPS203 Specification.
     *
     * @param s A variable length array of bytes
     *
     * @return A byte array of exactly 32 bytes
     */
    protected final byte[] shake256(byte[] s) throws NoSuchAlgorithmException {

        byte[] result = new byte[32];

        // TODO: Implement hash function

        return result;

    }

    /**
     * Implements the G hash function (SHA3-512) from the FIPS203 Specification.
     *
     * The spec says that this function should return two 32-byte arrays, but since
     * Java does not handle tuple wrapping in this fashion we return a single
     * concatenated 64-byte array and expect the caller to split the upper and lower
     * 32-bits into separate seed values.
     *
     * In this future this may be wrapped in a SeedValue interface
     *
     * @param c Variable length byte array input seed
     * @return An array of exactly 64 bytes representing two concatenated 32-byte seed values
     *
     * @throws NoSuchAlgorithmException If the SHA3-512 algorithm cannot be found on the system.
     */
    protected final byte[] sha3hash512(byte[] c) throws NoSuchAlgorithmException {
        byte[] result = new byte[64];

        MessageDigest md = MessageDigest.getInstance("SHA3-512");
        result = md.digest(c);

        return result;
    }

}
