package com.mimiclone.fips203.codec;

import com.mimiclone.fips203.ParameterSet;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CodecTests {

    @Test
    public void byteEncodeTest() {

        // Input -> Composed of a repeated pattern of 4 ints that will be encoded in 3 bytes
        int[] input = {
                0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B,
                0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000,
                0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00,
                0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8,
                0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B,
                0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000,
                0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00,
                0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8,
                0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B,
                0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000,
                0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00,
                0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8,
                0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B,
                0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000,
                0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00,
                0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8,
                0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B, 0x1C8, 0xD00, 0x000, 0x07B,
                0x1C8
        };

        // Expected Output
        byte[] expectedOutput = {
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
                (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00,
                (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07,
                (byte) 0xB1, (byte) 0xC8, (byte) 0xD0, (byte) 0x00, (byte) 0x00, (byte) 0x07, (byte) 0xB1, (byte) 0xC8,
        };

        // Create KeyGenImpl instance
        MLKEMCodec codec = MLKEMCodec.build(ParameterSet.ML_KEM_1024);

        // Execute 12-bit byte encoding
        byte[] result = codec.byteEncode(12, input);

        // Iterate over result bytes and compare with expected output
        assertEquals(expectedOutput.length, result.length);
        for (int i = 0; i < result.length; i++) {
            assertEquals(expectedOutput[i], result[i]);
        }

    }

}
